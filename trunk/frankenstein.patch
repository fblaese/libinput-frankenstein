From 5cf8ec74a0f4f2649c9e76d5e00c58f69a796a28 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fabian=20Bl=C3=A4se?= <fabian@blaese.de>
Date: Mon, 1 Jun 2020 00:38:51 +0200
Subject: [PATCH] Revert "touchpad: make tp_detect_jumps() time-independent"

This reverts commit 7d0e1875701e750936b8f963db9182ca633df44e.
It breaks my Frankenstein Thinkpad. :-(
---
 src/evdev-mt-touchpad.c | 40 +++++++++-------------------------------
 1 file changed, 9 insertions(+), 31 deletions(-)

diff --git a/src/evdev-mt-touchpad.c b/src/evdev-mt-touchpad.c
index 38745cdf..2284f4bf 100644
--- a/src/evdev-mt-touchpad.c
+++ b/src/evdev-mt-touchpad.c
@@ -1479,19 +1479,13 @@ tp_need_motion_history_reset(struct tp_dispatch *tp)
 }
 
 static bool
-tp_detect_jumps(const struct tp_dispatch *tp,
-		struct tp_touch *t,
-		uint64_t time)
+tp_detect_jumps(const struct tp_dispatch *tp, struct tp_touch *t)
 {
 	struct device_coords delta;
 	struct phys_coords mm;
 	struct tp_history_point *last;
-	double abs_distance, rel_distance;
+	double distance;
 	bool is_jump = false;
-	uint64_t tdelta;
-	/* Reference interval from the touchpad the various thresholds
-	 * were measured from */
-	unsigned int reference_interval = ms2us(12);
 
 	/* We haven't seen pointer jumps on Wacom tablets yet, so exclude
 	 * those.
@@ -1507,35 +1501,19 @@ tp_detect_jumps(const struct tp_dispatch *tp,
 	/* called before tp_motion_history_push, so offset 0 is the most
 	 * recent coordinate */
 	last = tp_motion_history_offset(t, 0);
-	tdelta = time - last->time;
-
-	/* For test devices we always force the time delta to 12, at least
-	   until the test suite actually does proper intervals. */
-	if (tp->device->model_flags & EVDEV_MODEL_TEST_DEVICE)
-		reference_interval = tdelta;
-
-	/* If the last frame is more than 25ms ago, we have irregular
-	 * frames, who knows what's a pointer jump here and what's
-	 * legitimate movement.... */
-	if (tdelta > 2 * reference_interval || tdelta == 0)
-		return false;
-
-	/* We historically expected ~12ms frame intervals, so the numbers
-	   below are normalized to that (and that's also where the
-	   measured data came from) */
 	delta.x = abs(t->point.x - last->point.x);
 	delta.y = abs(t->point.y - last->point.y);
 	mm = evdev_device_unit_delta_to_mm(tp->device, &delta);
-	abs_distance = hypot(mm.x, mm.y) * reference_interval/tdelta;
-	rel_distance = abs_distance - t->jumps.last_delta_mm;
+
+	distance = hypot(mm.x, mm.y);
 
 	/* Cursor jump if:
 	 * - current single-event delta is >20mm, or
-	 * - we increased the delta by over 7mm within a 12ms frame.
-	 *   (12ms simply because that's what I measured)
+	 * - we increased the delta by over 7mm within a frame.
 	 */
-	is_jump = abs_distance > 20.0 || rel_distance > 7;
-	t->jumps.last_delta_mm = abs_distance;
+	is_jump = distance > 20.0 ||
+		 (distance - t->jumps.last_delta_mm) > 7;
+	t->jumps.last_delta_mm = distance;
 
 	return is_jump;
 }
@@ -1716,7 +1694,7 @@ tp_process_state(struct tp_dispatch *tp, uint64_t time)
 			continue;
 		}
 
-		if (tp_detect_jumps(tp, t, time)) {
+		if (tp_detect_jumps(tp, t)) {
 			if (!tp->semi_mt)
 				evdev_log_bug_kernel_ratelimit(tp->device,
 						&tp->jump.warning,
-- 
2.26.2

